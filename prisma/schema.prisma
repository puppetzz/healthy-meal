// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/database"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  fullName  String   @map("full_name")
  email     String
  picture   String?
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")

  comment         Comment[]
  mealPlan        MealPlan[]
  healthMetric    HealthMetric?
  mealPlanComment MealPlanComment[]
  role            Role              @relation(fields: [roleId], references: [id])
  postOwned       Post[]            @relation("author_post")
  postReviewed    Post?             @relation("reviewer_post")

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  user User[]

  @@map("role")
}

model Post {
  id               Int        @id @default(autoincrement())
  authorId         String     @map("author_id")
  parentId         Int?       @map("parent_id")
  recipeId         Int?       @unique @map("recipe_id")
  thumbnail        String?
  title            String
  content          String?
  rating           Float?
  numberOfComments Int        @default(0) @map("number_of_comments")
  numberOfReviews  Int        @default(0) @map("number_of_reviews")
  status           PostStatus @default(DRAFT)
  published        Boolean    @default(false)
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @default(now()) @map("updated_at")
  publishedAt      DateTime?  @map("published_at")
  reviewerId       String?    @unique

  recipe             Recipe?              @relation(fields: [recipeId], references: [id])
  author             User                 @relation("author_post", fields: [authorId], references: [id])
  parent             Post?                @relation("ParentPost", fields: [parentId], references: [id])
  post               Post[]               @relation("ParentPost")
  postCategory       PostCategory[]
  comment            Comment[]
  reviewer           User?                @relation("reviewer_post", fields: [reviewerId], references: [id])
  notificationOnPost NotificationOnPost[]

  @@map("posts")
}

model PostCategory {
  postId     Int @map("post_id")
  categoryId Int @map("category_id")

  post     Post     @relation(fields: [postId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
  @@map("post_categories")
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String
  key          String         @unique
  postCategory PostCategory[]

  @@map("categories")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  parentId  Int?     @map("parent_id")
  authorId  String   @map("author_id")
  content   String
  rating    Float?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  post    Post      @relation(fields: [postId], references: [id])
  author  User      @relation(fields: [authorId], references: [id])
  parent  Comment?  @relation("ParentComment", fields: [parentId], references: [id])
  comment Comment[] @relation("ParentComment")

  @@map("comments")
}

model Recipe {
  id                 Int                  @id @default(autoincrement())
  prepTime           Int                  @map("prep_time")
  cookTime           Int                  @map("cook_time")
  servings           Int
  servingSize        Int?                 @map("serving_size")
  calculationUnit    String               @map("calculation_unit")
  keeping            String
  freezer            String
  ingredient         Ingredient[]
  nutrition          Nutrition?
  recipeFoodCategory RecipeFoodCategory[]
  mealPlanRecipe     MealPlanRecipe[]
  post               Post?

  @@map("recipes")
}

model Nutrition {
  id                 Int  @id @default(autoincrement())
  recipeId           Int  @unique @map("recipe_id")
  calories           Int
  protein            Int
  carbohydrates      Int
  fat                Int
  saturatedFat       Int? @map("saturated_fat")
  polyunsaturatedFat Int? @map("polyunsaturated_fat")
  monounsaturatedFat Int? @map("monounsaturated_fat")
  transFat           Int? @map("trans_fat")
  fiber              Int?
  sugar              Int?
  sodium             Int?
  potassium          Int?
  cholesterol        Int?
  vitaminA           Int? @map("vitamin_a")
  vitaminC           Int? @map("vitamin_c")
  calcium            Int?
  iron               Int?

  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@map("nutritions")
}

model Ingredient {
  id          Int     @id @default(autoincrement())
  recipeId    Int     @map("recipe_id")
  name        String
  description String?
  amount      Float
  unit        String
  preparation String?

  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@map("ingredients")
}

model FoodCategory {
  id                 Int                  @id @default(autoincrement())
  name               String
  icon               String
  key                String               @unique
  numberOfRecipes    Int                  @default(0) @map("number_of_recipes")
  recipeFoodCategory RecipeFoodCategory[]

  @@map("food_categories")
}

model RecipeFoodCategory {
  recipeId       Int @map("recipe_id")
  foodCategoryId Int @map("food_category_id")

  recipe       Recipe       @relation(fields: [recipeId], references: [id])
  foodCategory FoodCategory @relation(fields: [foodCategoryId], references: [id])

  @@id([recipeId, foodCategoryId])
  @@map("recipe_food_categories")
}

model MealPlan {
  id               Int               @id @default(autoincrement())
  authorId         String            @map("author_id")
  title            String
  content          String?
  status           MealPlanStatus    @default(DRAFT)
  frequency        MealPlanFrequency @default(DAILY)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @default(now()) @map("updated_at")
  publishedAt      DateTime?
  mealPerDay       Int               @map("meal_per_day")
  rating           Float             @default(0)
  numberOfComments Int               @default(0) @map("number_of_comments")
  numberOfReviews  Int               @default(0) @map("number_of_reviews")
  mealPlanRecipe   MealPlanRecipe[]

  author          User              @relation(fields: [authorId], references: [id])
  mealPlanComment MealPlanComment[]

  @@map("meal_plans")
}

model MealPlanRecipe {
  id         Int @id @default(autoincrement())
  mealPlanId Int @map("meal_plan_id")
  recipeId   Int @map("recipe_id")
  day        Int @default(1)
  meal       Int @default(1)

  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id])
  recipe   Recipe   @relation(fields: [recipeId], references: [id])

  @@map("meal_plan_recipes")
}

model HealthMetric {
  id            Int    @id @default(autoincrement())
  userId        String @unique @map("user_id")
  weight        Float
  height        Float
  age           Int
  activityLevel String @map("activity_level")
  gender        Gender
  bmi           Int
  bmr           Int
  tdee          Int

  user User @relation(fields: [userId], references: [id])

  @@map("health_metrics")
}

model MealPlanComment {
  id         Int      @id @default(autoincrement())
  mealPlanId Int      @map("meal_plan_id")
  parentId   Int?     @map("parent_id")
  authorId   String   @map("author_id")
  content    String
  rating     Float?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  mealPlan MealPlan          @relation(fields: [mealPlanId], references: [id])
  author   User              @relation(fields: [authorId], references: [id])
  parent   MealPlanComment?  @relation("ParentMealPlanComment", fields: [parentId], references: [id])
  comment  MealPlanComment[] @relation("ParentMealPlanComment")

  @@map("meal_plan_comments")
}

model NotificationOnPost {
  id                 Int @id @default(autoincrement())
  postNotificationId Int @map("post_notification_id")
  postId             Int @map("post_id")

  postNotification PostNotification @relation(fields: [postNotificationId], references: [id])
  post             Post             @relation(fields: [postId], references: [id])
}

model PostNotification {
  id                 Int                  @id @default(autoincrement())
  title              String
  content            String
  notificationOnPost NotificationOnPost[]

  @@map("post_notification")
}

enum PostStatus {
  DRAFT
  PENDING
  ACCEPTED
  REJECTED
}

enum MealPlanStatus {
  DRAFT
  PENDING
  PUBLISHED
  ARCHIVED
}

enum MealPlanFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum Gender {
  MALE
  FEMALE
}

enum ActivityLevel {
  SEDENTARY
  LIGHTLY_EXERCISE
  MODERATELY_EXERCISE
  HEAVY_EXERCISE
  ATHLETE
}
